generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  orgId         String      @id
  orgName       String
  orgClassrooms Classroom[]
  orgUsers      User[]
}

model User {
  userId            String                @id @default(uuid())
  userOrgId         String
  userName          String
  userType          UserType
  userPassword      String
  userDisplayName   String
  Classroom         Classroom[]
  userClassrooms    ClassroomEnrollment[]
  attendedLectures  LectureAttendance[]
  quizAttempts      QuizAttempt[]
  userReportTargets ReportTarget[]
  s3Requests        S3Request[]
  userOrg           Organization          @relation(fields: [userOrgId], references: [orgId])
}

model ReportTarget {
  reportTargetId    String @default(uuid())
  userId            String
  reportTargetEmail String
  reportUser        User   @relation(fields: [userId], references: [userId])

  @@id([userId, reportTargetId])
}

model Classroom {
  classroomId          String                @id @default(uuid())
  classroomName        String
  classroomOrgId       String
  facultyUserId        String
  classroomOrg         Organization          @relation(fields: [classroomOrgId], references: [orgId])
  User                 User                  @relation(fields: [facultyUserId], references: [userId])
  classroomEnrollments ClassroomEnrollment[]
  classroomLectures    Lecture[]
}

model ClassroomEnrollment {
  userId            String
  classroomId       String
  enrolledClassroom Classroom @relation(fields: [classroomId], references: [classroomId])
  enrolledUser      User      @relation(fields: [userId], references: [userId])

  @@id([userId, classroomId])
}

model Lecture {
  lectureId             String              @id @default(uuid())
  title                 String
  lectureStartTimestamp DateTime
  lectureEndTimestamp   DateTime
  lectureClassroomId    String
  lectureClassroom      Classroom           @relation(fields: [lectureClassroomId], references: [classroomId])
  lectureAttendance     LectureAttendance[]
  lectureTranscripts    LectureTranscript[]
  notes                 Notes[]
  lectureQuiz           Quiz[]
}

model LectureAttendance {
  lectureId       String
  userId          String
  attendedLecture Lecture @relation(fields: [lectureId], references: [lectureId])
  attendingUser   User    @relation(fields: [userId], references: [userId])

  @@id([userId, lectureId])
}

model LectureTranscript {
  transcriptId       String  @default(uuid())
  lectureId          String
  transcriptText     String
  transcribedLecture Lecture @relation(fields: [lectureId], references: [lectureId])

  @@id([lectureId, transcriptId])
}

model Quiz {
  quizId        String         @id @default(uuid())
  quizName      String
  lectureId     String
  quizLecture   Lecture        @relation(fields: [lectureId], references: [lectureId])
  quizAttempts  QuizAttempt[]
  quizQuestions QuizQuestion[]
}

model QuizQuestion {
  questionId          String         @id @default(uuid())
  quizId              String
  questionText        String
  questionOptions     String[]
  questionAnswerIndex Int
  questionParentQuiz  Quiz           @relation(fields: [quizId], references: [quizId])
  questionResponses   QuizResponse[]
}

model QuizAttempt {
  attemptId        String         @id @default(uuid())
  quizId           String
  attemptTimestamp DateTime
  userId           String
  attemptedQuiz    Quiz           @relation(fields: [quizId], references: [quizId])
  attemptUser      User           @relation(fields: [userId], references: [userId])
  attemptReport    QuizReport?
  attemptResponses QuizResponse[]
}

model QuizResponse {
  responseId        String       @id @default(uuid())
  attemptId         String
  questionId        String
  responseContent   String
  responseAccuracy  Float
  responseAttempt   QuizAttempt  @relation(fields: [attemptId], references: [attemptId])
  attemptedQuestion QuizQuestion @relation(fields: [questionId], references: [questionId])
}

model QuizReport {
  reportId    String      @id @default(uuid())
  attemptId   String      @unique
  quizAttempt QuizAttempt @relation(fields: [attemptId], references: [attemptId])
}

model Notes {
  notesId      String  @id @default(uuid())
  notesContent String
  notesTitle   String
  lectureId    String
  notesLecture Lecture @relation(fields: [lectureId], references: [lectureId])
}

model S3Object {
  objectKey         String @id
  objectFileName    String
  objectSizeBytes   Int
  objectContentType String
}

model S3Request {
  requestId     String          @id @default(uuid())
  objectKey     String
  requestMethod S3RequestMethod
  requestUserId String?
  requestUser   User?           @relation(fields: [requestUserId], references: [userId])
}

enum UserType {
  Student
  Teacher
  Administrator
}

enum S3RequestMethod {
  GET
  PUT
  DELETE
}
