generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  orgId         String      @id
  orgName       String
  orgClassrooms Classroom[]
  orgUsers      User[]
}

model User {
  userId                String                 @id @default(uuid())
  userOrgId             String
  userName              String
  userType              UserType
  userPassword          String
  userDisplayName       String
  Classroom             Classroom[]
  userClassrooms        ClassroomEnrollment[]
  attendedLectures      LectureAttendance[]
  quizAttempts          QuizAttempt[]
  userReportTargets     ReportTarget[]
  s3Requests            S3Request[]
  userOrg               Organization           @relation(fields: [userOrgId], references: [orgId], onDelete: Cascade)
  assessmentAttempts    AssessmentAttempt[]
  sssignmentSubmissions AssignmentSubmission[]
}

model ReportTarget {
  reportTargetId    String @default(uuid())
  userId            String
  reportTargetEmail String
  reportUser        User   @relation(fields: [userId], references: [userId])

  @@id([userId, reportTargetId])
}

model Classroom {
  classroomId          String                @id @default(uuid())
  classroomName        String
  classroomOrgId       String
  facultyUserId        String
  classroomOrg         Organization          @relation(fields: [classroomOrgId], references: [orgId], onDelete: Cascade)
  User                 User                  @relation(fields: [facultyUserId], references: [userId], onDelete: Cascade)
  classroomEnrollments ClassroomEnrollment[]
  classroomLectures    Lecture[]
  classroomAssessments Assessment[]
  classroomAssignments Assignment[]
}

model ClassroomResource {
  resourceId        String @id @default(uuid())
  resourceName      String
  resourceObjectKey String @unique
  classroomId       String
}

model ClassroomEnrollment {
  userId            String
  classroomId       String
  enrolledClassroom Classroom @relation(fields: [classroomId], references: [classroomId], onDelete: Cascade)
  enrolledUser      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, classroomId])
}

model Lecture {
  lectureId             String              @id @default(uuid())
  title                 String
  lectureStartTimestamp DateTime
  lectureEndTimestamp   DateTime
  lectureClassroomId    String
  lectureClassroom      Classroom           @relation(fields: [lectureClassroomId], references: [classroomId], onDelete: Cascade)
  lectureAttendance     LectureAttendance[]
  lectureTranscripts    LectureTranscript[]
  notes                 Notes[]
  lectureQuiz           Quiz[]
}

model LectureAttendance {
  lectureId       String
  userId          String
  attendedLecture Lecture @relation(fields: [lectureId], references: [lectureId], onDelete: Cascade)
  attendingUser   User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, lectureId])
}

model LectureTranscript {
  transcriptId       String  @default(uuid())
  lectureId          String
  transcriptText     String
  transcribedLecture Lecture @relation(fields: [lectureId], references: [lectureId], onDelete: Cascade)

  @@id([lectureId, transcriptId])
}

model Quiz {
  quizId        String         @id @default(uuid())
  quizName      String
  lectureId     String
  quizLecture   Lecture        @relation(fields: [lectureId], references: [lectureId], onDelete: Cascade)
  quizAttempts  QuizAttempt[]
  quizQuestions QuizQuestion[]
}

model QuizQuestion {
  questionId          String         @id @default(uuid())
  quizId              String
  questionText        String
  questionOptions     String[]
  questionAnswerIndex Int
  questionParentQuiz  Quiz           @relation(fields: [quizId], references: [quizId], onDelete: Cascade)
  questionResponses   QuizResponse[]
}

model QuizAttempt {
  attemptId        String         @id @default(uuid())
  quizId           String
  attemptTimestamp DateTime
  userId           String
  attemptedQuiz    Quiz           @relation(fields: [quizId], references: [quizId], onDelete: Cascade)
  attemptUser      User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  attemptReport    QuizReport?
  attemptResponses QuizResponse[]
}

model QuizResponse {
  responseId        String       @id @default(uuid())
  attemptId         String
  questionId        String
  responseContent   String
  responseAccuracy  Float
  responseAttempt   QuizAttempt  @relation(fields: [attemptId], references: [attemptId], onDelete: Cascade)
  attemptedQuestion QuizQuestion @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
}

model QuizReport {
  reportId    String      @id @default(uuid())
  attemptId   String      @unique
  quizAttempt QuizAttempt @relation(fields: [attemptId], references: [attemptId], onDelete: Cascade)
}

model Notes {
  notesId      String  @id @default(uuid())
  notesContent String
  notesTitle   String
  lectureId    String
  notesLecture Lecture @relation(fields: [lectureId], references: [lectureId], onDelete: Cascade)
}

model Assignment {
  assignmentId          String    @id @default(uuid())
  assignmentName        String
  assignmentClassroomId String
  assignmentClassroom   Classroom @relation(fields: [assignmentClassroomId], references: [classroomId], onDelete: Cascade)
}

model AssignmentSubmission {
  submissionId        String   @id @default(uuid())
  submissionTimestamp DateTime
  submissionObjectKey String
  submissionUserId    String
  submissionUser      User     @relation(fields: [submissionUserId], references: [userId], onDelete: Cascade)
}

model Assessment {
  assessmentId        String               @id @default(uuid())
  assessmentTitle     String
  classroomId         String
  assessmentClassroom Classroom            @relation(fields: [classroomId], references: [classroomId], onDelete: Cascade)
  assessmentQuestions AssessmentQuestion[]
}

model AssessmentQuestion {
  questionId          String               @id @default(uuid())
  questionText        String
  questionMarks       Int
  questionAssesmentId String
  questionAssesment   Assessment           @relation(fields: [questionAssesmentId], references: [assessmentId], onDelete: Cascade)
  questionResponses   AssessmentResponse[]
}

model AssessmentAttempt {
  attemptId           String               @id @default(uuid())
  userId              String
  attemptUser         User                 @relation(fields: [userId], references: [userId], onDelete: Cascade)
  assessmentResponses AssessmentResponse[]
}

model AssessmentResponse {
  responseId            String             @id @default(uuid())
  attemptId             String
  responseAttempt       AssessmentAttempt  @relation(fields: [attemptId], references: [attemptId], onDelete: Cascade)
  responseText          String
  responseObtainedMarks Int
  responseQuestionId    String
  responseQuestion      AssessmentQuestion @relation(fields: [responseQuestionId], references: [questionId], onDelete: Cascade)
}

model S3Object {
  objectKey         String @id
  objectFileName    String
  objectSizeBytes   Int
  objectContentType String
}

model S3Request {
  requestId     String          @id @default(uuid())
  objectKey     String
  requestMethod S3RequestMethod
  requestUserId String?
  requestUser   User?           @relation(fields: [requestUserId], references: [userId], onDelete: Cascade)
}

enum UserType {
  Student
  Teacher
  Administrator
}

enum S3RequestMethod {
  GET
  PUT
  DELETE
}
